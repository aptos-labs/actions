name: Move Tests
description: Run move formatting checks, linting, compilation, and tests. You must checkout the code prior to using this. This uses the latest released version of the Aptos CLI.

inputs:
  WORKING_DIRECTORY:
    description: "The directory to run the commands from."
    required: false
    default: "."
  SKIP_FMT:
    description: "If true, skip formatting."
    required: false
    default: "false"
  SKIP_LINT:
    description: "If true, skip linting."
    required: false
    default: "false"
  SKIP_COMPILE:
    description: "If true, skip compilation."
    required: false
    default: "false"
  SKIP_TEST:
    description: "If true, skip tests."
    required: false
    default: "false"
  ADDITIONAL_FMT_ARGS:
    description: "Additional arguments to pass to the CLI when running movefmt."
    required: false
  ADDITIONAL_LINT_ARGS:
    description: "Additional arguments to pass to the CLI when running move lint."
    required: false
  ADDITIONAL_COMPILE_ARGS:
    description: "Additional arguments to pass to the CLI when running move compile."
    required: false
  ADDITIONAL_TEST_ARGS:
    description: "Additional arguments to pass to the CLI when running move test."
    required: false
  CLI_VERSION:
    description: "The version of the Aptos CLI to install. If not specified, the latest version will be installed."
    required: false
  SKIP_INSTALLING_CLI:
    description: "If true, skip installing the Aptos CLI. We will assume it is already on the PATH."
    required: false
    default: "false"
  SHELL:
    description: "The shell to use for the steps."
    required: false
    default: "bash"

runs:
  using: composite
  steps:
    - name: Install Aptos CLI
      uses: aptos-labs/actions/install-aptos-cli@main
      if: ${{ inputs.SKIP_INSTALLING_CLI == 'false' }}
      with:
        CLI_VERSION: ${{ inputs.CLI_VERSION }}

    - name: Install movefmt
      shell: ${{ inputs.SHELL }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      run: aptos update movefmt

    - name: Check for formatting changes
      shell: ${{ inputs.SHELL }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      if: ${{ inputs.SKIP_FMT == 'false' }}
      run: aptos move fmt ${{ inputs.ADDITIONAL_FMT_ARGS }}
    - name: Return error if formatting changes detected
      shell: ${{ inputs.SHELL }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      if: ${{ inputs.SKIP_FMT == 'false' }}
      run: |
        if git diff --name-only | grep "sources/" > /dev/null; then
          echo "Error: Found unstaged changes in sources/ directory after formatting"
          git diff
          exit 1
        fi

    - name: Lint code
      shell: ${{ inputs.SHELL }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      if: ${{ inputs.SKIP_LINT == 'false' }}
      run: aptos move lint ${{ inputs.ADDITIONAL_LINT_ARGS }}

    - name: Compile code
      shell: ${{ inputs.SHELL }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      if: ${{ inputs.SKIP_COMPILE == 'false' }}
      run: aptos move compile ${{ inputs.ADDITIONAL_COMPILE_ARGS }}

    - name: Run move tests
      shell: ${{ inputs.SHELL }}
      working-directory: ${{ inputs.WORKING_DIRECTORY }}
      if: ${{ inputs.SKIP_TEST == 'false' }}
      run: aptos move test ${{ inputs.ADDITIONAL_TEST_ARGS }}
